@model TeamAdmin.Web.Models.AdminViewModels.Event
<div class="container">
    <h1>@(Model.EventId.HasValue ? "Event Details" : "Add an Event")</h1>
    <form asp-action="Add" name="myform" id="myform" method="post">
        <div class="form-horizontal">
            @*<div asp-validation-summary="All" class="text-danger"></div>*@
            <div class="form-group">
                <label asp-for="EventType" class="col-md-2 control-label">What *</label>
                <div class="col-md-10">
                    <select class="btn btn-default" id="eventtype" name="eventtype" asp-for="EventType" asp-items="Html.GetEnumSelectList<TeamAdmin.Core.EventType>()"></select>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="StartDate" class="col-md-2 control-label">Starts on/at *</label>
                <div class="col-md-10">
                    <input asp-for="StartDate" class="form-control" name="StartDate" id="StartDate" type="datetime-local" required value="@(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("yyyy-MM-ddThh:mm") : DateTime.Now.ToString("yyyy-MM-ddThh:mm"))" />
                    <span asp-validation-for="StartDate" class="text-danger" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="EndDate" class="col-md-2 control-label">Ends on/at *</label>
                <div class="col-md-10">
                    <input asp-for="EndDate" class="form-control" name="EndDate" id="EndDate" type="datetime-local" required value="@(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("yyyy-MM-ddThh:mm") : DateTime.Now.ToString("yyyy-MM-ddThh:mm"))" />
                    <span asp-validation-for="EndDate" class="text-danger" />
                </div>
            </div>

            <div class="form-group">
                <label class="col-md-2 control-label" id="TeamLabel">Teams *</label>
                <div class="col-md-10">
                    <select name="Teams" id="Teams" asp-for="Teams" class="form-control" required></select>
                    <span asp-validation-for="Teams" class="text-danger" />
                    @*<input type="button" id="SelectAllTeamsButton" value="Select All Teams" title="Select All Teams" class="btn btn-sm btn-default" />*@
                </div>
            </div>

            <div class="form-group" id="OpponentGroup">
                <label class="col-md-2 control-label">Opponent *</label>
                <div class="col-md-10">
                    <select name="Opponent" id="Opponent" class="form-control" asp-for="Opponent"></select>
                    <span class="text-danger" asp-validation-for="Opponent" />
                    <input type="button" id="AddOpponentButton" value="Create New Opponent" title="Create a new opponent" class="btn btn-sm btn-default" />
                </div>
            </div>

            <div class="form-group" id="TitleGroup">
                <label asp-for="Title" class="col-md-2 control-label">Title *</label>
                <div class="col-md-10">
                    <input asp-for="Title" class="form-control" style="max-width:100%" name="title" id="title" required />
                    <span asp-validation-for="Title" class="text-danger" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="Address" class="col-md-2 control-label"></label>
                <div class="col-md-10">
                    <input asp-for="Address" class="form-control" style="max-width:100%" name="address" id="address" />
                    <span asp-validation-for="Address" class="text-danger" />
                </div>
            </div>
            <div class="form-group" id="mapHolder">
                <div class="col-md-2"></div>
                <div class="col-md-10" id="mapDiv">
                    <img id="map" class="img-responsive" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="col-md-2 control-label"></label>
                <div class="col-md-10">
                    <textarea autofocus class="form-control" name="description" id="body" rows="10" style="max-width:100%">@Model.Description</textarea>
                    <span asp-validation-for="Description" class="text-danger" />
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-1 col-md-2">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
        <input type="hidden" asp-for="EventId" />
    </form>

    <div id="OpponentModal" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form id="opponentForm">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">Add an Opponent</h4>
                    </div>
                    <div class="modal-body">

                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="col-md-3 control-label">Name *</label>
                                <div class="col-md-9">
                                    <input class="form-control" name="name" id="name" maxlength="250" required />
                                </div>
                            </div>
                            @*<div class="form-group">
                                <label class="col-md-3 control-label">Short Name</label>
                                <div class="col-md-9">
                                    <input class="form-control" name="shortname" id="shortname" maxlength="25" />
                                </div>
                            </div>*@
                            @*<div class="form-group">
                                <label class="col-md-3 control-label">Website</label>
                                <div class="col-md-9">
                                    <input type="url" class="form-control" name="website" id="website" maxlength="250" />
                                </div>
                            </div>*@
                            <div class="form-group">
                                <label class="col-md-3 control-label">Logo</label>
                                <div class="col-md-9">
                                    <input type="file" class="form-control" name="logoUploader" id="logoUploader" />
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </form>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->

    <div>
        <a href="/admin/events">Back to List</a>
    </div>
</div>
@section scripts {    
    <script src="~/js/backend.min.js"></script>
    <script>
        $(document).ready(function () {
            var GAME = 1, EXHIBITION_GAME = 6;

            var opponent = $('#Opponent').select2(
            {
                placeholder: 'Select an opponent',
                ajax: {
                    url: "/api/opponents",
                    data: function (params) {
                        var query = {
                            name: params.term
                        }
                        // Query paramters will be ?search=[term]&page=[page]
                        return query;
                    },
                    processResults: function (data) {
                        var values = $.map(data, function (obj) {
                            obj.text = obj.name;
                            obj.id = obj.opponentId;
                            return obj;
                        });
                        return {
                            results: values
                        };
                    },
                    cache: false
                },
                allowClear: true
            });

            var teams = $('#Teams').select2(
            {
                placeholder: 'Select a team',
                ajax: {
                    url: "/api/teams",
                    data: function (params) {
                        var query = {
                            name: params.term
                        }
                        // Query paramters will be ?search=[term]&page=[page]
                        return query;
                    },
                    processResults: function (data) {
                        var values = $.map(data, function (obj) {
                            obj.text = obj.displayName + " - " + obj.name;
                            obj.id = obj.teamId;
                            return obj;
                        });
                        return { results: values };
                    }
                },
                allowClear: true
            });
            var title = $('#title');
            var teamLabel = $("#TeamLabel");

            function setUpMultiSelection() {
                if ($("#eventtype").val() == GAME || $("#eventtype").val() == EXHIBITION_GAME) {
                    console.log('game');
                    $("#OpponentGroup").show();
                    $("#TitleGroup").hide();
                    opponent.prop('required', true);

                    if (!teams.val()) {
                        $("#Teams").removeAttr("multiple");
                        $("#Teams").prop('selectedIndex', -1);
                    }
                    else if (typeof teams.val() != "string" && teams.val().length > 1) {
                        console.log('clearing ' + teams.val().length);
                        teams.val(null).trigger("change");
                        $("#Teams").removeAttr("multiple");
                        $("#Teams").prop('selectedIndex', -1);
                    } else {
                        $("#Teams").removeAttr("multiple");
                    }
                    teamLabel.text("Team *");
                }
                else {
                    console.log('not game');
                    $("#OpponentGroup").hide();
                    $("#TitleGroup").show();
                    opponent.removeAttr("required");
                    $("#Teams").attr("multiple", "multiple");
                    teamLabel.text("Teams *");
                }
            }

            $(function () {
                var validator = $("#myform").submit(function () {
                    // update underlying textarea before submit validation
                    if ($("#eventtype").val() == GAME || $("#eventtype").val() == EXHIBITION_GAME) {
                        title.val("vs. " + $("#Opponent option:selected").text());
                    }
                }).validate({
                    ignore: "",
                    rules: {
                        title: "required",
                        content: "required"
                    },
                    errorPlacement: function (label, element) {
                        label.insertAfter(element);
                    }
                });
                validator.focusInvalid = function () {
                    // put focus on tinymce on submit validation
                    if (this.settings.focusInvalid) {
                        try {
                            var toFocus = $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []);
                            toFocus.filter(":visible").focus();
                        } catch (e) {
                            // ignore IE throwing errors when focusing hidden elements
                        }
                    }
                }
            });

            $("#eventtype").change(function () {
                setUpMultiSelection();
            });

            $("#address").on('input', updateMap);

            $("#AddOpponentButton").click(function () {
                console.log("opening modal");
                $("#name").val("");
                $("#logoUploader").fileinput({
                    //'overwriteInitial': true,
                    'initialPreviewShowDelete': true,
                    'showUpload': false, // hide upload button
                    'showRemove': false, // hide remove button
                    'showClose': false,  //hide the x at the top right
                    'showUploadedThumbs': false,
                    'previewFileType': 'jpg',
                    'maxFileCount': 1,
                    'uploadUrl': '/api/upload',
                    'uploadAsync': false,
                    'fileActionSettings': {
                        'showZoom': false,
                        'showRemove': true,
                        'showDrag': false
                    }
                });

                $('#logoUploader').on("filebatchselected", function (event, files) {
                    // trigger upload method immediately after files are selected
                    console.log("filebatchselected");
                    $('#logoUploader').fileinput("upload");
                });

                $('#logoUploader').on('filebatchuploadsuccess', function (event, data, previewId, index) {
                    console.log("filebatchuploadsuccess");
                    var response = data.response;
                    if (response && response.initialPreview && response.initialPreview.length > 0) {
                        for (i = 0; i < response.initialPreview.length; i++) {
                            var img = $.parseHTML(response.initialPreview[i]);
                            var hidden = $("<input type='hidden' name='logourl' value='" + $(img).attr("src") + "'>");
                            $('#opponentForm').append(hidden);
                            response.initialPreview[i] = "<img src='" + $(img).attr("src") + "?w=150&h=100'>";
                        }
                    }
                });

                $('#logoUploader').on('filebatchuploadcomplete', function (event, files, extra) {
                    console.log('File batch upload complete');
                });

                $('#logoUploader').on('fileloaded', function (event, file, previewId, index, reader) {
                    console.log("fileloaded");
                });

                $('#logoUploader').on('fileimageloaded', function (event, previewId) {
                    console.log("fileimageloaded");
                });

                $('#logoUploader').on('fileerror', function (event, data, msg) {
                    console.log("error");
                    console.log(data.id);
                    console.log(data.index);
                    console.log(data.file);
                    console.log(data.reader);
                    console.log(data.files);
                });

                $('#OpponentModal').modal('show');
            });

            $("#OpponentModal").on("hidden.bs.modal", function () {
                $('#logoUploader').fileinput('destroy');
                $("input[name='logourl'][type='hidden']", $('#opponentForm')).remove();
            });

            updateMap();
            setUpMultiSelection();

            //set initial value for teams and opponent
            @if (Model.Teams != null && Model.Teams.Count > 0)
            {
                foreach(var team in Model.Teams)
                {
                    @Html.Raw("teams.append( $('<option selected>Loading...</option>').val(\"" + team + "\").text(\"" + Model.TeamList.FirstOrDefault(t => t.TeamId == team).Name + "\").trigger('change'));");
                }
            }

            @if (Model.Opponent.HasValue &&  Model.OpponentList != null && Model.OpponentList.Count > 0)
            {
                    @Html.Raw("var $opponentoption = $('<option selected>Loading...</option>').val(\"" + Model.Opponent + "\").text(\"" + Model.OpponentList.FirstOrDefault(o => o.OpponentId == Model.Opponent).Name + "\");");
                    @Html.Raw("opponent.append($opponentoption).trigger('change'); ");
            }

            function updateMap() {
                if ($("#address").val().trim().length < 5) {
                    $("#mapHolder").attr("style", "display:none;");
                } else {
                    $("#mapHolder").attr("style", "display:block;");
                    var src = "https://maps.googleapis.com/maps/api/staticmap?key=AIzaSyAzy5wXJVUmq5QGP1XilEOFKIl1lxaG1Z8&center=" + $("#address").val() + "&size=400x300&zoom=14&maptype=roadmap&markers=color:red|" + $("#address").val();
                    $("#map").attr("src", src);
                }
            }

            //logo
            $("#opponentForm").submit(function (e) {
                console.log("submitting...");

                $.ajax({
                    type: "POST",
                    url: "/api/opponents",
                    data: $("#opponentForm").serialize(), // serializes the form's elements.
                    success: function (data) {
                        $('#OpponentModal').modal('toggle');
                    },
                    error: function () {
                        alert("There was an error creating the opponent. Please contact administrator");
                    }
                });

                e.preventDefault();
            });            
        });
    </script>
}

@section headerlinks{
<link href="~/css/backend.min.css" rel="stylesheet" />
}
